{
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# **Galeano-Garcia, G. S., Chen, T., Hamaker, B. R., & Cantu-Jungles, T. M. (n.d.). Unexpected synergistic boost in short-chain fatty acids by a fiber mixture across health and disease states. Department of Food Science, Purdue University.**"
      ],
      "metadata": {
        "id": "68hF7T-PZGcu"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iM9yPusy-0SX"
      },
      "source": [
        "# Libraries"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": true,
        "id": "DR1Qwe4zcTQG"
      },
      "outputs": [],
      "source": [
        "!pip install pulp\n",
        "!pip install pandas\n",
        "!pip install matplotlib seaborn\n",
        "!pip install pandas matplotlib\n",
        "!pip install statsmodels\n",
        "!pip install bootstrapped\n",
        "!pip install scipy"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Data"
      ],
      "metadata": {
        "id": "SnMvPULOlHj6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "data = \"\"\"\n",
        "ID,fiber,Acetate,Propionate,Butyrate,Total,con\n",
        "C1b1,bGlucan,6.708002341,3.079214247,2.039041338,11.82625793,CD\n",
        "C1b2,bGlucan,2.425444242,2.983243707,2.021384715,7.430072664,CD\n",
        "C2b1,bGlucan,4.241504596,0.409912574,0.669715967,5.321133137,CD\n",
        "C2b2,bGlucan,4.391365617,0.424238516,0.597718348,5.413322481,CD\n",
        "C3b1,bGlucan,4.972056802,1.447245312,0.879876797,7.299178911,CD\n",
        "C3b2,bGlucan,4.560172451,1.373369208,0.8449339,6.778475559,CD\n",
        "C4b1,bGlucan,4.168882473,1.48,0.908426553,6.557309026,CD\n",
        "C4b2,bGlucan,4.171876766,1.51,0.925051135,6.606927901,CD\n",
        "C6b1,bGlucan,14.21874958,1.092381736,1.569030914,16.88016223,CD\n",
        "C6b2,bGlucan,15.76476766,1.252675398,1.755309417,18.77275248,CD\n",
        "C7b1,bGlucan,7.865213032,0.717249114,3.199352845,11.78181499,CD\n",
        "C7b2,bGlucan,6.360452811,0.591188457,2.573244052,9.52488532,CD\n",
        "H01b1,bGlucan,10.54,1.88,1.3,13.72,HC\n",
        "H01b2,bGlucan,10.51,1.89,1.37,13.77,HC\n",
        "H02b1,bGlucan,23.81,4.94,5.34,34.09,HC\n",
        "H02b2,bGlucan,21.68,4.32,4.69,30.69,HC\n",
        "H03b1,bGlucan,13.07,0.88,1.51,15.46,HC\n",
        "H03b2,bGlucan,11.63,0.76,1.48,13.87,HC\n",
        "H04b1,bGlucan,18,0.91,21.14,40.05,HC\n",
        "H04b2,bGlucan,16.9,0.93,18.96,36.79,HC\n",
        "H05b1,bGlucan,10.65,1.43,1.94,14.02,HC\n",
        "H05b2,bGlucan,11.41,1.5,1.99,14.9,HC\n",
        "H06b1,bGlucan,22.01,2.73,3.33,28.07,HC\n",
        "H06b2,bGlucan,21.15,2.54,3.08,26.77,HC\n",
        "H07b1,bGlucan,5.01,1.4,1.15,7.56,HC\n",
        "H07b2,bGlucan,4.46,1.3,1.04,6.8,HC\n",
        "H08b1,bGlucan,22.23,4.47,6.89,33.59,HC\n",
        "H08b2,bGlucan,21.2,4.31,6.65,32.16,HC\n",
        "H09b1,bGlucan,8.81,1.28,1.47,11.56,HC\n",
        "H09b2,bGlucan,10.58,1.51,2.7,14.79,HC\n",
        "H10b1,bGlucan,12.23,1.95,3.31,17.49,HC\n",
        "H10b2,bGlucan,12.58,2.09,3.67,18.34,HC\n",
        "P01b1,bGlucan,17.21,1.02,1.9,20.13,PD\n",
        "P01b2,bGlucan,18.69,1.19,2.13,22.01,PD\n",
        "P02b1,bGlucan,6.3,1.28,1.32,8.9,PD\n",
        "P02b2,bGlucan,5.62,1.05,1.08,7.75,PD\n",
        "P03b1,bGlucan,16.87,2.01,5.28,24.16,PD\n",
        "P03b2,bGlucan,14.52,1.81,4.77,21.1,PD\n",
        "P04b1,bGlucan,12.69,1.08,3.47,17.24,PD\n",
        "P04b2,bGlucan,14.48,1.18,3.76,19.42,PD\n",
        "P05b1,bGlucan,25.6,4.7,4.06,34.36,PD\n",
        "P05b2,bGlucan,29.76,5.21,5.11,40.08,PD\n",
        "P06b1,bGlucan,18.85,3.5,1.52,23.87,PD\n",
        "P06b2,bGlucan,17.52,3.33,2.01,22.86,PD\n",
        "P07b1,bGlucan,24.4,2.5,4.44,31.34,PD\n",
        "P07b2,bGlucan,21.75,2.18,3.68,27.61,PD\n",
        "P08b1,bGlucan,12.58,1.18,11.03,24.79,PD\n",
        "P08b2,bGlucan,12.33,0.99,9.57,22.89,PD\n",
        "P09b1,bGlucan,21.05,5.85,7.42,34.32,PD\n",
        "P09b2,bGlucan,20.97,5.73,7.89,34.59,PD\n",
        "P10b1,bGlucan,12.28,0.91,1.52,14.71,PD\n",
        "P10b2,bGlucan,14.73,1.2,2.11,18.04,PD\n",
        "U1b1,bGlucan,15.89715687,1.160785374,8.950483537,26.00842578,UC\n",
        "U1b2,bGlucan,14.96769448,1.057452785,8.996592308,25.02173957,UC\n",
        "U2b1,bGlucan,10.90410384,1.198083142,2.301376412,14.40356339,UC\n",
        "U2b2,bGlucan,9.874565336,1.13206105,2.15907423,13.16570062,UC\n",
        "U3b1,bGlucan,2.387808007,0.397665328,0.029124277,2.814597612,UC\n",
        "U3b2,bGlucan,2.4,0.405079937,0.032815967,2.837895904,UC\n",
        "U4b1,bGlucan,3.377148938,0.196877966,1.180086724,4.754113628,UC\n",
        "U4b2,bGlucan,3.009552649,0.17032413,1.169955677,4.349832456,UC\n",
        "U5b1,bGlucan,13.35313155,0.47008644,1.806586982,15.62980497,UC\n",
        "U5b2,bGlucan,11.79816742,0.424798771,1.638637565,13.86160376,UC\n",
        "U6b1,bGlucan,4.277028504,0.521969383,1.29338961,6.092387497,UC\n",
        "U6b2,bGlucan,4.073932687,0.524898966,1.30627795,5.905109603,UC\n",
        "U7b1,bGlucan,25.08391572,2.513110611,4.077656099,31.67468243,UC\n",
        "U7b2,bGlucan,20.26902985,2.1870935,2.810559163,25.26668251,UC\n",
        "V1f1,bGlucan,11.25575469,4.610904629,1.871943085,17.7386024,HIV\n",
        "V1F1,bGlucan,0.846028473,0.576208108,0.300109185,1.722345766,HIV\n",
        "V2f1,bGlucan,20.34339542,1.24464455,1.796154741,23.38419471,HIV\n",
        "V2F1,bGlucan,1.194908079,0.977457479,1.043660676,3.216026234,HIV\n",
        "C1K1,Blank12,3.081280623,2.674658825,1.286193004,7.042132452,CD\n",
        "C1K2,Blank12,3.185040411,2.761170809,1.318510081,7.264721301,CD\n",
        "C2K1,Blank12,2.274685322,0.427230672,0.61330977,3.315225764,CD\n",
        "C2K2,Blank12,1.568324683,0.449743292,0.656830107,2.674898082,CD\n",
        "C3K1,Blank12,4.356840191,1.50160489,0.897312206,6.755757287,CD\n",
        "C3K2,Blank12,0.949301689,1.644485665,0.934274349,3.528061703,CD\n",
        "C4K1,Blank12,3.101969458,1.27,0.780123723,5.152093181,CD\n",
        "C4K2,Blank12,3.407282896,1.62,0.96215122,5.989434116,CD\n",
        "C6K1,Blank12,3.797531479,0.975038875,0.925127786,5.69769814,CD\n",
        "C6K2,Blank12,3.428060697,0.873645738,0.832421117,5.134127552,CD\n",
        "C7K1,Blank12,2.654369941,0.703047682,0.504628389,3.862046012,CD\n",
        "C7K2,Blank12,2.256172187,0.577730557,0.406802057,3.240704801,CD\n",
        "H01K1,Blank12,9.14,1.86,1.03,12.03,HC\n",
        "H01K2,Blank12,9.63,1.85,0.96,12.44,HC\n",
        "H02K1,Blank12,8.1,2.14,2.17,12.41,HC\n",
        "H02K2,Blank12,7.94,2.13,2.17,12.24,HC\n",
        "H03K1,Blank12,3.65,0.83,0.68,5.16,HC\n",
        "H03K2,Blank12,3.5,0.8,0.64,4.94,HC\n",
        "H04K1,Blank12,4.38,0.99,0.97,6.34,HC\n",
        "H04K2,Blank12,4.5,1.01,0.96,6.47,HC\n",
        "H05K1,Blank12,5.29,1.32,1.74,8.35,HC\n",
        "H05K2,Blank12,4.92,1.23,1.62,7.77,HC\n",
        "H06K1,Blank12,7.3,1.65,1.97,10.92,HC\n",
        "H06K2,Blank12,7.44,1.67,1.97,11.08,HC\n",
        "H07K1,Blank12,3.69,1.2,0.95,5.84,HC\n",
        "H07K2,Blank12,5.02,1.67,1.32,8.01,HC\n",
        "H08K1,Blank12,7.36,2.36,3.24,12.96,HC\n",
        "H08K2,Blank12,6.4,2.01,2.7,11.11,HC\n",
        "H09K1,Blank12,4.63,1.45,0.99,7.07,HC\n",
        "H09K2,Blank12,4.51,1.43,1.06,7,HC\n",
        "H10K1,Blank12,6.74,2.25,2.8,11.79,HC\n",
        "H10K2,Blank12,6.98,2.44,3.13,12.55,HC\n",
        "P01K1,Blank12,4.15,0.5,0.7,5.35,PD\n",
        "P01K2,Blank12,5.24,0.85,0.96,7.05,PD\n",
        "P02K1,Blank12,3.34,0.6,0.58,4.52,PD\n",
        "P02K2,Blank12,3.37,0.6,0.58,4.55,PD\n",
        "P03K1,Blank12,4.4,0.76,0.98,6.14,PD\n",
        "P03K2,Blank12,4.36,0.75,0.98,6.09,PD\n",
        "P04K1,Blank12,4.7,1.09,0.95,6.74,PD\n",
        "P04K2,Blank12,4.96,1.24,1.12,7.32,PD\n",
        "P05K1,Blank12,7.2,1.38,1.24,9.82,PD\n",
        "P05K2,Blank12,8.56,1.82,1.79,12.17,PD\n",
        "P06K1,Blank12,5.8,1.08,1,7.88,PD\n",
        "P06K2,Blank12,6.1,1.07,1,8.17,PD\n",
        "P07K1,Blank12,8.29,1.8,2.75,12.84,PD\n",
        "P07K2,Blank12,7.51,1.48,2.15,11.14,PD\n",
        "P08K1,Blank12,4.23,0.69,0.5,5.42,PD\n",
        "P08K2,Blank12,3.94,0.6,0.44,4.98,PD\n",
        "P09K1,Blank12,6.36,1.65,2.69,10.7,PD\n",
        "P09K2,Blank12,6.37,1.68,2.73,10.78,PD\n",
        "P10K1,Blank12,5.65,1.07,1.07,7.79,PD\n",
        "P10K2,Blank12,6.47,1.26,1.27,9,PD\n",
        "U1K1,Blank12,6.296483988,1.386205853,1.285938346,8.968628187,UC\n",
        "U1K2,Blank12,6.250431167,1.394295816,1.300471142,8.945198125,UC\n",
        "U2K1,Blank12,5.536867163,1.043659576,1.23399721,7.814523949,UC\n",
        "U2K2,Blank12,5.373955601,1.013141141,1.20770893,7.594805672,UC\n",
        "U3K1,Blank12,2.425854603,0.426410746,0.040978802,2.893244151,UC\n",
        "U3K2,Blank12,2.393511433,0.421629382,0.036415548,2.851556363,UC\n",
        "U4K1,Blank12,1.632179103,0.107901851,0.231139773,1.971220727,UC\n",
        "U4K2,Blank12,1.355696724,0.098800647,0.213342184,1.667839555,UC\n",
        "U5K1,Blank12,2.185754627,0.43972387,0.415070711,3.040549208,UC\n",
        "U5K2,Blank12,2.109157343,0.432244602,0.410740986,2.952142931,UC\n",
        "U6K1,Blank12,2.942450327,0.510371304,0.589735828,4.042557459,UC\n",
        "U6K2,Blank12,3.339570164,0.55888076,0.600123762,4.498574686,UC\n",
        "U7K1,Blank12,5.841787398,1.291332535,1.005018708,8.138138641,UC\n",
        "U7K2,Blank12,5.598307965,1.26050877,1.014035372,7.872852107,UC\n",
        "V1K1,Blank12,1.965222026,0.901117581,0.560865128,3.427204735,HIV\n",
        "V1K2,Blank12,1.666145293,0.737647282,0.453390426,2.857183001,HIV\n",
        "V2K1,Blank12,2.78059107,1.166065513,1.248038836,5.194695419,HIV\n",
        "V2K2,Blank12,2.885126262,1.183789494,1.277685729,5.346601485,HIV\n",
        "H01F1,Feces,4.34,1.37,0.92,6.63,HC\n",
        "H01F2,Feces,4.18,1.31,0.87,6.36,HC\n",
        "H02F1,Feces,2.46,1.01,1.39,4.86,HC\n",
        "H02F2,Feces,2.3,0.87,1.05,4.22,HC\n",
        "H03F1,Feces,1.01,0.46,0.24,1.71,HC\n",
        "H03F2,Feces,1,0.42,0.23,1.65,HC\n",
        "H04F1,Feces,2.3,0.61,0.68,3.59,HC\n",
        "H04F2,Feces,2.24,0.58,0.67,3.49,HC\n",
        "H05F1,Feces,3.12,1.05,1.46,5.63,HC\n",
        "H05F2,Feces,3.06,1.01,1.43,5.5,HC\n",
        "H06F1,Feces,2.02,0.87,0.65,3.54,HC\n",
        "H06F2,Feces,2.1,0.9,0.67,3.67,HC\n",
        "H07F1,Feces,3.91,1.58,1.89,7.38,HC\n",
        "H07F2,Feces,4.1,1.66,1.98,7.74,HC\n",
        "H08F1,Feces,2.4,1.07,0.71,4.18,HC\n",
        "H08F2,Feces,2.41,1.06,0.71,4.18,HC\n",
        "H09F1,Feces,2.6,1.12,0.7,4.42,HC\n",
        "H09F2,Feces,2.6,1.11,0.69,4.4,HC\n",
        "H10F1,Feces,3.68,1.45,1.91,7.04,HC\n",
        "H10F2,Feces,3.58,1.4,1.86,6.84,HC\n",
        "P01F1,Feces,1.52,0.37,0.4,2.29,PD\n",
        "P01F2,Feces,1.81,0.45,0.5,2.76,PD\n",
        "P02F1,Feces,1.07,0.46,0.31,1.84,PD\n",
        "P02F2,Feces,1.08,0.48,0.31,1.87,PD\n",
        "P03F1,Feces,1.26,0.32,0.32,1.9,PD\n",
        "P03F2,Feces,1.23,0.3,0.29,1.82,PD\n",
        "P04F1,Feces,2.7,1.03,1.05,4.78,PD\n",
        "P04F2,Feces,2.43,0.94,0.98,4.35,PD\n",
        "P05F1,Feces,2.33,0.69,0.64,3.66,PD\n",
        "P05F2,Feces,2.32,0.71,0.69,3.72,PD\n",
        "P06F1,Feces,2.57,0.59,0.56,3.72,PD\n",
        "P06F2,Feces,2.8,0.63,0.6,4.03,PD\n",
        "P07F1,Feces,2.92,0.82,1.01,4.75,PD\n",
        "P07F2,Feces,2.67,0.75,0.93,4.35,PD\n",
        "P08F1,Feces,1.39,0.27,0.21,1.87,PD\n",
        "P08F2,Feces,1.29,0.23,0.18,1.7,PD\n",
        "P09F1,Feces,2.51,0.79,1.27,4.57,PD\n",
        "P09F2,Feces,2.51,0.82,1.34,4.67,PD\n",
        "P10F1,Feces,2.47,0.87,0.57,3.91,PD\n",
        "P10F2,Feces,2.19,0.76,0.5,3.45,PD\n",
        "C1a1,FOS,4.263607318,3.466105016,2.285316616,10.01502895,CD\n",
        "C1a2,FOS,3.717057515,3.032412379,1.984751914,8.734221808,CD\n",
        "C2a1,FOS,8.90143127,0.434609399,0.586614338,9.922655007,CD\n",
        "C2a2,FOS,7.557589429,0.40296925,0.61146123,8.572019909,CD\n",
        "C3a1,FOS,6.403817334,1.256774066,0.756309988,8.416901388,CD\n",
        "C3a2,FOS,6.412007862,1.148773887,0.68821703,8.248998779,CD\n",
        "C4a1,FOS,10.58285368,1.18,0.935353335,12.69820702,CD\n",
        "C4a2,FOS,11.22866209,1.3,1.122852865,13.65151496,CD\n",
        "C6a1,FOS,19.74910895,1.654151457,1.946733255,23.34999366,CD\n",
        "C6a2,FOS,20.01120239,1.638661839,1.888946642,23.53881087,CD\n",
        "C7a1,FOS,8.631697286,0.663299162,0.276572479,9.571568927,CD\n",
        "C7a2,FOS,9.315667866,0.703426905,0.339387743,10.35848251,CD\n",
        "H01a1,FOS,38.17,1.19,3.13,42.49,HC\n",
        "H01a2,FOS,39.58,1.3,3.36,44.24,HC\n",
        "H02a1,FOS,27.66,3.64,4.04,35.34,HC\n",
        "H02a2,FOS,28.18,3.77,4.11,36.06,HC\n",
        "H03a1,FOS,32.55,0.68,2.36,35.59,HC\n",
        "H03a2,FOS,34.42,0.7,3.2,38.32,HC\n",
        "H04a1,FOS,25.2,1.34,28.48,55.02,HC\n",
        "H04a2,FOS,23.59,1.27,27.88,52.74,HC\n",
        "H05a1,FOS,19.28,1.31,1.63,22.22,HC\n",
        "H05a2,FOS,22.68,1.53,1.96,26.17,HC\n",
        "H06a1,FOS,39.52,3.44,5.2,48.16,HC\n",
        "H06a2,FOS,41.28,3.4,4.95,49.63,HC\n",
        "H07a1,FOS,5.63,1.21,1.02,7.86,HC\n",
        "H07a2,FOS,5.96,1.32,1.16,8.44,HC\n",
        "H08a1,FOS,35.97,3.76,10.68,50.41,HC\n",
        "H08a2,FOS,31.5,3.13,8.45,43.08,HC\n",
        "H09a1,FOS,8.88,1.28,1.31,11.47,HC\n",
        "H09a2,FOS,9.24,1.41,1.48,12.13,HC\n",
        "H10a1,FOS,28.18,1.89,4.83,34.9,HC\n",
        "H10a2,FOS,28.12,1.91,5,35.03,HC\n",
        "P01a1,FOS,18.28,1.56,1.28,21.12,PD\n",
        "P01a2,FOS,22.67,1.86,1.64,26.17,PD\n",
        "P02a1,FOS,28.78,1.37,3.05,33.2,PD\n",
        "P02a2,FOS,30.22,1.46,3.52,35.2,PD\n",
        "P03a1,FOS,21.67,1.74,11.54,34.95,PD\n",
        "P03a2,FOS,23.94,1.86,11.77,37.57,PD\n",
        "P04a1,FOS,23.82,1.03,5.14,29.99,PD\n",
        "P04a2,FOS,28.39,1.19,5.59,35.17,PD\n",
        "P05a1,FOS,35.74,3.73,6.99,46.46,PD\n",
        "P05a2,FOS,35.12,3.79,6.97,45.88,PD\n",
        "P06a1,FOS,33.26,2.23,1.6,37.09,PD\n",
        "P06a2,FOS,32.34,2.15,1.35,35.84,PD\n",
        "P07a1,FOS,35.76,3.55,5.48,44.79,PD\n",
        "P07a2,FOS,39.43,4.18,7,50.61,PD\n",
        "P08a1,FOS,30.36,1.47,5.097,36.927,PD\n",
        "P08a2,FOS,25.43,1.15,3.532,30.112,PD\n",
        "P09a1,FOS,27.54,4.97,10.69,43.2,PD\n",
        "P09a2,FOS,26.28,4.86,10.5,41.64,PD\n",
        "P10a1,FOS,34.77,1.35,2.33,38.45,PD\n",
        "P10a2,FOS,33.84,1.33,3.23,38.4,PD\n",
        "U1a1,FOS,17.85387857,0.888150358,10.06154699,28.80357592,UC\n",
        "U1a2,FOS,18.44804202,0.886827514,10.62534973,29.96021926,UC\n",
        "U2a1,FOS,33.19280501,1.894579246,6.477292773,41.56467703,UC\n",
        "U2a2,FOS,33.71160094,1.961914138,6.637654571,42.31116965,UC\n",
        "U3a1,FOS,19.98751255,0.29076224,0.029017726,20.30729252,UC\n",
        "U3a2,FOS,19.90043785,0.291927716,0.026263724,20.21862929,UC\n",
        "U4a1,FOS,9.408857677,0.043603928,4.329875598,13.7823372,UC\n",
        "U4a2,FOS,6.935715336,0.034915297,3.338529738,10.30916037,UC\n",
        "U5a1,FOS,20.6773505,0.42492625,2.316702753,23.4189795,UC\n",
        "U5a2,FOS,20.70173799,0.424581229,2.13209178,23.258411,UC\n",
        "U6a1,FOS,15.59506412,0.468397677,12.29795503,28.36141683,UC\n",
        "U6a2,FOS,16.52181822,0.476914515,12.6160791,29.61481184,UC\n",
        "U7a1,FOS,33.88679819,2.879719785,4.607498924,41.3740169,UC\n",
        "U7a2,FOS,38.32417125,3.133075242,5.079003199,46.53624969,UC\n",
        "V1a1,FOS,10.27191501,3.185703265,1.103785879,14.56140415,HIV\n",
        "V1a2,FOS,10.7108698,3.206291868,1.136740434,15.0539021,HIV\n",
        "V2a1,FOS,17.88671847,1.091803263,1.608387704,20.58690944,HIV\n",
        "V2a2,FOS,19.88857005,1.173063537,1.630233043,22.69186663,HIV\n",
        "C1e1,Mixture,11.06528932,3.433447654,2.763348732,17.26208571,CD\n",
        "C1e2,Mixture,13.48947403,3.847866198,2.815314428,20.15265466,CD\n",
        "C2e1,Mixture,12.49059496,0.483361393,1.043805942,14.0177623,CD\n",
        "C2e2,Mixture,15.20937387,0.500631864,1.096428441,16.80643418,CD\n",
        "C3e1,Mixture,8.551365369,1.601089303,0.076962398,10.22941707,CD\n",
        "C3e2,Mixture,8.185680059,1.524978525,0.921713688,10.63237227,CD\n",
        "C4e1,Mixture,8.763294884,1.21,0.074511642,10.04780653,CD\n",
        "C4e2,Mixture,10.53364079,1.45,1.014691148,12.99833194,CD\n",
        "C6e1,Mixture,20.11560609,1.337666164,1.644634032,23.09790629,CD\n",
        "C6e2,Mixture,22.29147762,1.466018035,1.77946066,25.53695632,CD\n",
        "C7e1,Mixture,10.88734989,0.940037885,2.529450406,14.35683818,CD\n",
        "C7e2,Mixture,10.89806395,0.929563286,2.448986309,14.27661355,CD\n",
        "H01e1,Mixture,21.07,1.16,2.94,25.17,HC\n",
        "H01e2,Mixture,26.85,1.92,3.26,32.03,HC\n",
        "H02e1,Mixture,38.13,4.65,4.39,47.17,HC\n",
        "H02e2,Mixture,39.38,4.93,4.91,49.22,HC\n",
        "H03e1,Mixture,35.99,1.1,3.06,40.15,HC\n",
        "H03e2,Mixture,32.57,0.84,2.1,35.51,HC\n",
        "H04e1,Mixture,36.51,1.71,19.1,57.32,HC\n",
        "H04e2,Mixture,39.02,1.83,20.45,61.3,HC\n",
        "H05e1,Mixture,32,1.59,2.55,36.14,HC\n",
        "H05e2,Mixture,31.54,1.52,2.39,35.45,HC\n",
        "H06e1,Mixture,49.95,3.55,4.22,57.72,HC\n",
        "H06e2,Mixture,55.81,4.49,5.82,66.12,HC\n",
        "H07e1,Mixture,26.35,1.03,1.05,28.43,HC\n",
        "H07e2,Mixture,30.28,1.22,1.25,32.75,HC\n",
        "H08e1,Mixture,43.68,3.23,12.08,58.99,HC\n",
        "H08e2,Mixture,42.47,3.07,11.34,56.88,HC\n",
        "H09e1,Mixture,16.61,1.41,1.15,19.17,HC\n",
        "H09e2,Mixture,15.86,1.27,1.51,18.64,HC\n",
        "H10e1,Mixture,36.66,2.1,7.68,46.44,HC\n",
        "H10e2,Mixture,37.18,2.08,7.71,46.97,HC\n",
        "P01e1,Mixture,26.41,2.03,1.06,29.5,PD\n",
        "P01e2,Mixture,26.32,2.04,1.03,29.39,PD\n",
        "P02e1,Mixture,31.43,2.71,2.08,36.22,PD\n",
        "P02e2,Mixture,30.45,2.54,1.94,34.93,PD\n",
        "P03e1,Mixture,30.41,3.02,5.1,38.53,PD\n",
        "P03e2,Mixture,31.52,3.02,5.89,40.43,PD\n",
        "P04e1,Mixture,27.71,1.7,3.61,33.02,PD\n",
        "P04e2,Mixture,23.99,1.41,2.47,27.87,PD\n",
        "P05e1,Mixture,46.59,8.69,6.29,61.57,PD\n",
        "P05e2,Mixture,44.67,7.83,5.49,57.99,PD\n",
        "P06e1,Mixture,42.27,4.51,1.56,48.34,PD\n",
        "P06e2,Mixture,37.94,3.82,1.22,42.98,PD\n",
        "P07e1,Mixture,54.12,5.74,6.7,66.56,PD\n",
        "P07e2,Mixture,52.89,5.91,7.22,66.02,PD\n",
        "P08e1,Mixture,36.85,3.73,4.57,45.15,PD\n",
        "P08e2,Mixture,37.43,3.86,5.09,46.38,PD\n",
        "P09e1,Mixture,33.04,5.25,11.29,49.58,PD\n",
        "P09e2,Mixture,34.61,5.41,12.36,52.38,PD\n",
        "P10e1,Mixture,35.02,1.79,1.71,38.52,PD\n",
        "P10e2,Mixture,31.12,1.56,1.47,34.15,PD\n",
        "U1e1,Mixture,41.5940926,1.076381781,8.316887904,50.98736229,UC\n",
        "U1e2,Mixture,40.9180836,1.095941861,7.928993527,49.94301899,UC\n",
        "U2e1,Mixture,51.5491279,2.865759856,5.895569593,60.31045735,UC\n",
        "U2e2,Mixture,45.09,2.5925405,5.470273693,53.15281419,UC\n",
        "U3e1,Mixture,12.32,0.287824009,0.077089065,12.68491307,UC\n",
        "U3e2,Mixture,11.06,0.295523425,0.031042227,11.38656565,UC\n",
        "U4e1,Mixture,11.8434463,0.085170934,3.977999728,15.90661696,UC\n",
        "U4e2,Mixture,11.5559932,0.091250748,3.913287207,15.56053116,UC\n",
        "U5e1,Mixture,32.81538768,0.37330105,1.96763992,35.15632865,UC\n",
        "U5e2,Mixture,36.56116405,0.401025976,1.999888068,38.96207809,UC\n",
        "U6e1,Mixture,8.197944719,0.392705578,6.606208596,15.19685889,UC\n",
        "U6e2,Mixture,8.538457738,0.390595105,6.788680038,15.71773288,UC\n",
        "U7e1,Mixture,41.16710569,3.240627911,4.897450195,49.3051838,UC\n",
        "U7e2,Mixture,42.92158207,3.345544023,4.946938852,51.21406495,UC\n",
        "V1e1,Mixture,11.96913988,5.426999357,1.299667514,18.69580675,HIV\n",
        "V1e2,Mixture,11.84409511,5.366673738,1.237745549,18.4485144,HIV\n",
        "V2e1,Mixture,16.27048169,1.160541218,1.441100348,18.87212326,HIV\n",
        "V2e2,Mixture,23.29908389,1.585033097,1.859885789,26.74400278,HIV\n",
        "C1c1,Pectin,7.165539818,2.314401854,1.372996385,10.85293806,CD\n",
        "C1c2,Pectin,11.90877078,3.485450169,1.964087994,17.35830894,CD\n",
        "C2c1,Pectin,15.56046073,0.610226407,1.12313194,17.29381908,CD\n",
        "C2c2,Pectin,15.32028046,0.572331527,1.118459667,17.01107165,CD\n",
        "C3c1,Pectin,7.753692075,1.147334659,0.804960393,9.705987127,CD\n",
        "C3c2,Pectin,6.462809724,0.954273566,0.723061247,8.140144537,CD\n",
        "C4c1,Pectin,11.41527381,1.37,0.867105957,13.65237977,CD\n",
        "C4c2,Pectin,10.15241249,1.22,0.055137084,11.42754957,CD\n",
        "C6c1,Pectin,17.68364355,1.496529246,1.685740577,20.86591337,CD\n",
        "C6c2,Pectin,14.25535387,1.189678536,1.350976419,16.79600883,CD\n",
        "C7c1,Pectin,8.296785261,0.792632802,1.48217335,10.57159141,CD\n",
        "C7c2,Pectin,8.363845867,0.767522766,1.858072485,10.98944112,CD\n",
        "H01c1,Pectin,27.2,1.99,1.26,30.45,HC\n",
        "H01c2,Pectin,29.97,2.12,1.32,33.41,HC\n",
        "H02c1,Pectin,59.96,4.12,3.94,68.02,HC\n",
        "H02c2,Pectin,60.93,3.74,3.67,68.34,HC\n",
        "H03c1,Pectin,45.72,1.47,2.61,49.8,HC\n",
        "H03c2,Pectin,44.99,1.32,2.38,48.69,HC\n",
        "H04c1,Pectin,59.75,1.57,11.95,73.27,HC\n",
        "H04c2,Pectin,50.02,1.27,9.22,60.51,HC\n",
        "H05c1,Pectin,39.61,1.68,3.02,44.31,HC\n",
        "H05c2,Pectin,34.66,1.47,2.77,38.9,HC\n",
        "H06c1,Pectin,55.57,3.76,3.57,62.9,HC\n",
        "H06c2,Pectin,54.51,3.51,2.92,60.94,HC\n",
        "H07c1,Pectin,52.06,1.34,1.62,55.02,HC\n",
        "H07c2,Pectin,52.83,1.43,1.69,55.95,HC\n",
        "H08c1,Pectin,62.57,3.32,5.95,71.84,HC\n",
        "H08c2,Pectin,69.28,3.72,6.6,79.6,HC\n",
        "H09c1,Pectin,17.58,1.24,1.22,20.04,HC\n",
        "H09c2,Pectin,16.73,1.18,1.01,18.92,HC\n",
        "H10c1,Pectin,61.4,2.36,10.65,74.41,HC\n",
        "H10c2,Pectin,62.84,2.38,10.17,75.39,HC\n",
        "P01c1,Pectin,28.65,1.74,1.22,31.61,PD\n",
        "P01c2,Pectin,30.53,1.82,1.42,33.77,PD\n",
        "P02c1,Pectin,46.93,2.9,4.75,54.58,PD\n",
        "P02c2,Pectin,42.53,2.6,3.92,49.05,PD\n",
        "P03c1,Pectin,42.26,2.78,4.17,49.21,PD\n",
        "P03c2,Pectin,41.02,2.75,4.3,48.07,PD\n",
        "P04c1,Pectin,25.35,1.71,2.66,29.72,PD\n",
        "P04c2,Pectin,23.51,1.33,3.42,28.26,PD\n",
        "P05c1,Pectin,54.92,10.39,4.99,70.3,PD\n",
        "P05c2,Pectin,54.39,10.21,4.76,69.36,PD\n",
        "P06c1,Pectin,51.05,3.57,1.61,56.23,PD\n",
        "P06c2,Pectin,51.5,3.67,1.69,56.86,PD\n",
        "P07c1,Pectin,72.2,4.5,6.48,83.18,PD\n",
        "P07c2,Pectin,65.67,3.74,4.79,74.2,PD\n",
        "P08c1,Pectin,35.22,2.68,3.14,41.04,PD\n",
        "P08c2,Pectin,40.48,3.18,3.92,47.58,PD\n",
        "P09c1,Pectin,58.91,5.41,11.02,75.34,PD\n",
        "P09c2,Pectin,52.88,4.55,9.35,66.78,PD\n",
        "P10c1,Pectin,23.93,1.58,0.97,26.48,PD\n",
        "P10c2,Pectin,23.4,1.57,0.94,25.91,PD\n",
        "U1c1,Pectin,45.7808395,0.902507357,6.251026546,52.9343734,UC\n",
        "U1c2,Pectin,47.8058713,0.895796909,5.936413472,54.63808168,UC\n",
        "U2c1,Pectin,54.37211213,1.807688954,7.622784467,63.80258555,UC\n",
        "U2c2,Pectin,58.36716082,1.898538284,7.839618393,68.1053175,UC\n",
        "U3c1,Pectin,8.92,0.222725153,0.27039882,9.413123973,UC\n",
        "U3c2,Pectin,8.82,0.22394957,0.298943457,9.342893027,UC\n",
        "U4c1,Pectin,13.03609588,0.197204279,2.904063619,16.13736378,UC\n",
        "U4c2,Pectin,12.0263576,0.182344906,2.694338897,14.9030414,UC\n",
        "U5c1,Pectin,28.79738835,0.388703357,1.07739773,30.26348944,UC\n",
        "U5c2,Pectin,30.07550026,0.404232288,1.147027661,31.62676021,UC\n",
        "U6c1,Pectin,10.0868435,0.414404876,9.775292019,20.2765404,UC\n",
        "U6c2,Pectin,9.103100039,0.3793094,9.076807632,18.55921707,UC\n",
        "U7c1,Pectin,64.97758472,3.63856241,5.629527599,74.24567473,UC\n",
        "U7c2,Pectin,55.78345283,3.039921598,5.194065845,64.01744027,UC\n",
        "V1c1,Pectin,18.15698198,4.467539307,1.058327789,23.68284908,HIV\n",
        "V1c2,Pectin,17.0972398,4.300843062,1.015405129,22.41348799,HIV\n",
        "V2c1,Pectin,25.93348579,1.646588152,1.296704398,28.87677834,HIV\n",
        "V2c2,Pectin,21.9550989,1.667881146,1.561420821,25.18440087,HIV\n",
        "C1d1,SAX,5.706244435,2.935680797,1.746557912,10.38848314,CD\n",
        "C1d2,SAX,5.471211264,2.861305965,1.757296575,10.0898138,CD\n",
        "C2d1,SAX,4.692509686,0.392196702,0.521278859,5.605985247,CD\n",
        "C2d2,SAX,4.264075395,0.376402821,0.533355134,5.17383335,CD\n",
        "C3d1,SAX,5.314604572,1.363956996,0.845814843,7.524376411,CD\n",
        "C3d2,SAX,4.929787819,1.333171529,0.197818475,6.460777823,CD\n",
        "C4d1,SAX,3.53649753,1.35,0.83991229,5.72640982,CD\n",
        "C4d2,SAX,3.454420118,1.37,0.842078697,5.666498815,CD\n",
        "C6d1,SAX,10.60778248,1.053119094,1.121043145,12.78194472,CD\n",
        "C6d2,SAX,10.61551121,1.08021758,1.157537631,12.85326642,CD\n",
        "C7d1,SAX,6.010893076,0.843550729,1.340250651,8.194694456,CD\n",
        "C7d2,SAX,6.607359062,0.942995987,1.308253959,8.858609008,CD\n",
        "H01d1,SAX,12.3,1.82,2.14,16.26,HC\n",
        "H01d2,SAX,13.37,2.08,2.4,17.85,HC\n",
        "H02d1,SAX,23.74,5.02,3.89,32.65,HC\n",
        "H02d2,SAX,22.99,4.92,3.96,31.87,HC\n",
        "H03d1,SAX,10.49,0.81,1.26,12.56,HC\n",
        "H03d2,SAX,11.24,0.88,1.18,13.3,HC\n",
        "H04d1,SAX,19.4,2.2,6.95,28.55,HC\n",
        "H04d2,SAX,20.26,2.36,7.77,30.39,HC\n",
        "H05d1,SAX,14,1.46,1.88,17.34,HC\n",
        "H05d2,SAX,14.68,1.61,1.98,18.27,HC\n",
        "H06d1,SAX,37.13,3.1,3.94,44.17,HC\n",
        "H06d2,SAX,39.02,3.43,4.69,47.14,HC\n",
        "H07d1,SAX,5.09,1.27,1.21,7.57,HC\n",
        "H07d2,SAX,4.97,1.26,1.06,7.29,HC\n",
        "H08d1,SAX,37.19,5.42,5.33,47.94,HC\n",
        "H08d2,SAX,33.83,4.92,4.3,43.05,HC\n",
        "H09d1,SAX,8.11,1.35,1.45,10.91,HC\n",
        "H09d2,SAX,7.88,1.31,1.25,10.44,HC\n",
        "H10d1,SAX,16.72,2.05,3.69,22.46,HC\n",
        "H10d2,SAX,17,2.02,3.6,22.62,HC\n",
        "P01d1,SAX,13.19,1.48,1.32,15.99,PD\n",
        "P01d2,SAX,12.21,1.29,1.11,14.61,PD\n",
        "P02d1,SAX,6.28,1.4,0.58,8.26,PD\n",
        "P02d2,SAX,6.3,1.44,0.58,8.32,PD\n",
        "P03d1,SAX,14.74,2.46,2.78,19.98,PD\n",
        "P03d2,SAX,16.08,3,3.73,22.81,PD\n",
        "P04d1,SAX,15.37,1.7,1.68,18.75,PD\n",
        "P04d2,SAX,15.19,1.69,1.75,18.63,PD\n",
        "P05d1,SAX,40.36,5.5,5.77,51.63,PD\n",
        "P05d2,SAX,37.23,4.85,4.96,47.04,PD\n",
        "P06d1,SAX,18.75,3.9,1.32,23.97,PD\n",
        "P06d2,SAX,17.15,3.56,1.17,21.88,PD\n",
        "P07d1,SAX,29.8,3.68,3.09,36.57,PD\n",
        "P07d2,SAX,37.55,4.96,4.62,47.13,PD\n",
        "P08d1,SAX,13.16,2.07,1.21,16.44,PD\n",
        "P08d2,SAX,14.88,2.43,1.21,18.52,PD\n",
        "P09d1,SAX,30.69,6.33,4.61,41.63,PD\n",
        "P09d2,SAX,35.24,7.56,5.73,48.53,PD\n",
        "P10d1,SAX,18.76,1.92,1.87,22.55,PD\n",
        "P10d2,SAX,18.08,1.84,1.8,21.72,PD\n",
        "U1d1,SAX,19.51052225,1.914339559,3.164318416,24.58918023,UC\n",
        "U1d2,SAX,18.07364827,1.798040898,3.122922939,22.99461211,UC\n",
        "U2d1,SAX,20.5819214,3.176684398,1.873460222,25.63206602,UC\n",
        "U2d2,SAX,19.80293844,3.096785195,1.872473466,24.7721971,UC\n",
        "U3d1,SAX,2.54,0.381640906,0.223701461,3.145342367,UC\n",
        "U3d2,SAX,2.58,0.390673733,0.19525539,3.165929123,UC\n",
        "U4d1,SAX,3.938490304,0.10956779,1.333275377,5.381333471,UC\n",
        "U4d2,SAX,4.416447301,0.180505995,1.276614756,5.873568052,UC\n",
        "U5d1,SAX,9.96594136,0.391816302,0.623092602,10.98085026,UC\n",
        "U5d2,SAX,9.637629487,0.389693335,0.637327369,10.66465019,UC\n",
        "U6d1,SAX,5.010361866,0.423482268,2.007537616,7.44138175,UC\n",
        "U6d2,SAX,5.026044218,0.404751335,1.983817045,7.414612598,UC\n",
        "U7d1,SAX,31.11882153,3.00309442,1.736719718,35.85863567,UC\n",
        "U7d2,SAX,39.69367777,3.770670068,2.222301524,45.68664936,UC\n",
        "V1d1,SAX,12.10018356,3.431141748,1.431540395,16.9628657,HIV\n",
        "V1d2,SAX,11.73292196,3.343491537,1.415654135,16.49206763,HIV\n",
        "V2d1,SAX,17.57050904,1.327075358,1.779692508,20.67727691,HIV\n",
        "V2d2,SAX,20.59252183,1.524197587,1.994100541,24.11081996,HIV\n",
        "\"\"\""
      ],
      "metadata": {
        "id": "DyJliUM7bRLb"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DehISV5tjfv6"
      },
      "source": [
        "## Data (improved version)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "acJfShpAjuBH"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "from io import StringIO\n",
        "from scipy.stats import ttest_ind\n",
        "import warnings\n",
        "\n",
        "warnings.filterwarnings('ignore', category=RuntimeWarning)\n",
        "\n",
        "data_str = data\n",
        "data_df = pd.read_csv(StringIO(data_str))\n",
        "\n",
        "conditions = ['CD', 'PD', 'UC', 'HIV', 'HC']\n",
        "metrics = ['Acetate', 'Propionate', 'Butyrate', 'Total']\n",
        "fibers = ['FOS', 'Pectin', 'SAX', 'bGlucan']\n",
        "\n",
        "def classify_significance(p_value):\n",
        "    if p_value < 0.0001:\n",
        "        return \"****\"\n",
        "    elif p_value < 0.001:\n",
        "        return \"***\"\n",
        "    elif p_value < 0.01:\n",
        "        return \"**\"\n",
        "    elif p_value < 0.05:\n",
        "        return \"*\"\n",
        "    else:\n",
        "        return \"ns\"\n",
        "\n",
        "results_list = []\n",
        "\n",
        "for condition in conditions:\n",
        "    condition_df = data_df[data_df['con'] == condition]\n",
        "    individual_base_ids = set(id[:-2] for id in condition_df['ID'] if \"e\" in id)\n",
        "\n",
        "    for individual in individual_base_ids:\n",
        "        individual_results = []\n",
        "\n",
        "        for metric in metrics:\n",
        "            mixture_df = condition_df[condition_df['ID'].str.startswith(individual) & condition_df['fiber'].str.contains('Mixture')]\n",
        "            mixture_mean = mixture_df[metric].mean()\n",
        "            mixture_std = mixture_df[metric].std()\n",
        "\n",
        "            expected_means = [condition_df[(condition_df['ID'].str.startswith(individual)) & (condition_df['fiber'] == fiber)][metric].mean() for fiber in fibers]\n",
        "            expected_mean = sum(expected_means) / 4\n",
        "\n",
        "            if not mixture_df[metric].dropna().empty:\n",
        "                t_stat, p_value = ttest_ind(mixture_df[metric].dropna(), [expected_mean] * len(mixture_df[metric].dropna()), equal_var=False)\n",
        "                significance_label = classify_significance(p_value)\n",
        "            else:\n",
        "                t_stat, p_value, significance_label = None, None, \"ns\"\n",
        "\n",
        "            individual_results.extend([\n",
        "                [individual, condition, metric, \"Mixture\", mixture_mean, mixture_std, p_value, significance_label],\n",
        "                [individual, condition, metric, \"Expected\", expected_mean, None, p_value, significance_label]\n",
        "            ])\n",
        "\n",
        "        results_list.extend(individual_results)\n",
        "\n",
        "column_names = ['Individual', 'Condition', 'SCFA', 'Fiber', 'Fiber_Mean', 'Fiber_Std', 'P-value', 'Significance']\n",
        "results_df = pd.DataFrame(results_list, columns=column_names)\n",
        "data_csv = results_df.to_csv(index=False)\n",
        "print(data_csv)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9kZ15jjCkafN"
      },
      "source": [
        "## %CV data\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8somzKMBZd_x"
      },
      "outputs": [],
      "source": [
        "from io import StringIO\n",
        "import pandas as pd\n",
        "\n",
        "data_io = StringIO(data)\n",
        "\n",
        "df = pd.read_csv(data_io)\n",
        "\n",
        "def calculate_cv_and_error(df, scfa_column):\n",
        "    mean_val = df[scfa_column].mean()\n",
        "    std_dev = df[scfa_column].std()\n",
        "    cv = (std_dev / mean_val * 100) if mean_val != 0 else 0\n",
        "    individual_cvs = ((df[scfa_column] / mean_val) / std_dev * 100) if std_dev != 0 else pd.Series([0]*len(df))\n",
        "    error_std_dev = individual_cvs.std() if len(individual_cvs) > 1 else 0\n",
        "    return cv, error_std_dev\n",
        "\n",
        "results = []\n",
        "for fiber in df['fiber'].unique():\n",
        "    for condition in df['con'].unique():\n",
        "        filtered_df = df[(df['fiber'] == fiber) & (df['con'] == condition)]\n",
        "        if not filtered_df.empty:\n",
        "            cv_acetate, error_acetate = calculate_cv_and_error(filtered_df, 'Acetate')\n",
        "            cv_propionate, error_propionate = calculate_cv_and_error(filtered_df, 'Propionate')\n",
        "            cv_butyrate, error_butyrate = calculate_cv_and_error(filtered_df, 'Butyrate')\n",
        "            cv_total, error_total = calculate_cv_and_error(filtered_df, 'Total')\n",
        "            results.append({\n",
        "                'Fiber': fiber,\n",
        "                'Condition': condition,\n",
        "                'CV_Acetate (%)': cv_acetate,\n",
        "                'Error_Acetate (%)': error_acetate,\n",
        "                'CV_Propionate (%)': cv_propionate,\n",
        "                'Error_Propionate (%)': error_propionate,\n",
        "                'CV_Butyrate (%)': cv_butyrate,\n",
        "                'Error_Butyrate (%)': error_butyrate,\n",
        "                'CV_Total (%)': cv_total,\n",
        "                'Error_Total (%)': error_total\n",
        "            })\n",
        "    filtered_df = df[df['fiber'] == fiber]\n",
        "    cv_acetate, error_acetate = calculate_cv_and_error(filtered_df, 'Acetate')\n",
        "    cv_propionate, error_propionate = calculate_cv_and_error(filtered_df, 'Propionate')\n",
        "    cv_butyrate, error_butyrate = calculate_cv_and_error(filtered_df, 'Butyrate')\n",
        "    cv_total, error_total = calculate_cv_and_error(filtered_df, 'Total')\n",
        "    results.append({\n",
        "        'Fiber': fiber,\n",
        "        'Condition': 'All conditions',\n",
        "        'CV_Acetate (%)': cv_acetate,\n",
        "        'Error_Acetate (%)': error_acetate,\n",
        "        'CV_Propionate (%)': cv_propionate,\n",
        "        'Error_Propionate (%)': error_propionate,\n",
        "        'CV_Butyrate (%)': cv_butyrate,\n",
        "        'Error_Butyrate (%)': error_butyrate,\n",
        "        'CV_Total (%)': cv_total,\n",
        "        'Error_Total (%)': error_total\n",
        "    })\n",
        "\n",
        "results_df = pd.DataFrame(results)\n",
        "\n",
        "output_io = StringIO()\n",
        "results_df.to_csv(output_io, index=False)\n",
        "data_csv = output_io.getvalue()\n",
        "\n",
        "print(data_csv)\n",
        "\n",
        "import pandas as pd\n",
        "import scipy.stats as stats\n",
        "import statsmodels.api as sm\n",
        "from statsmodels.formula.api import ols\n",
        "from statsmodels.stats.multicomp import pairwise_tukeyhsd\n",
        "from io import StringIO\n",
        "\n",
        "def perform_anova_and_tukey_for_scfa(df, scfas):\n",
        "    results = []\n",
        "    for scfa in scfas:\n",
        "        for condition in df['con'].unique():\n",
        "            filtered_df = df[df['con'] == condition]\n",
        "            mod = ols(f'{scfa} ~ C(fiber)', data=filtered_df).fit()\n",
        "            anova_result = sm.stats.anova_lm(mod, typ=2)\n",
        "            if anova_result.loc['C(fiber)', 'PR(>F)'] < 0.05:\n",
        "                tukey_result = pairwise_tukeyhsd(endog=filtered_df[scfa], groups=filtered_df['fiber'], alpha=0.05)\n",
        "                tukey_summary = tukey_result.summary()\n",
        "            else:\n",
        "                tukey_summary = \"ANOVA not significant; Tukey's test not performed.\"\n",
        "            results.append({\n",
        "                'SCFA': scfa,\n",
        "                'Condition': condition,\n",
        "                'ANOVA_F': anova_result.loc['C(fiber)', 'F'],\n",
        "                'ANOVA_p': anova_result.loc['C(fiber)', 'PR(>F)'],\n",
        "                'Tukey_result': tukey_summary\n",
        "            })\n",
        "    return results\n",
        "\n",
        "scfas = ['Acetate', 'Propionate', 'Butyrate', 'Total']\n",
        "\n",
        "anova_tukey_results = perform_anova_and_tukey_for_scfa(df, scfas)\n",
        "\n",
        "for result in anova_tukey_results:\n",
        "    print(f\"SCFA: {result['SCFA']}\")\n",
        "    print(f\"Condition: {result['Condition']}\")\n",
        "    print(f\"ANOVA F-value: {result['ANOVA_F']}, p-value: {result['ANOVA_p']}\")\n",
        "    print(\"Tukey's HSD test result:\")\n",
        "    if isinstance(result['Tukey_result'], str):\n",
        "        print(result['Tukey_result'])\n",
        "    else:\n",
        "        print(result['Tukey_result'])\n",
        "    print(\"\\n\")"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Plots"
      ],
      "metadata": {
        "id": "nH5ywofslLd_"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5UdcgTCljoWW"
      },
      "source": [
        "## Figure 1. Synergistic effects of fiber mixtures on SCFA production across health and disease states."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "iBsDCKZ5nQe3"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "from io import StringIO\n",
        "from scipy.stats import ttest_rel\n",
        "import matplotlib.patches as mpatches\n",
        "from matplotlib.ticker import MaxNLocator\n",
        "\n",
        "data_df = pd.read_csv(StringIO(data_csv))\n",
        "\n",
        "data_df = data_df[data_df['Condition'] != 'HIV']\n",
        "\n",
        "scfas = data_df['SCFA'].unique()\n",
        "ordered_conditions = ['HC', 'PD', 'CD', 'UC']\n",
        "\n",
        "condition_color_maps = {}\n",
        "for condition in ordered_conditions:\n",
        "    unique_individuals = data_df[data_df['Condition'] == condition]['Individual'].unique()\n",
        "    colors = plt.cm.tab20(np.linspace(0, 1, len(unique_individuals)))\n",
        "    condition_color_maps[condition] = {ind: colors[i] for i, ind in enumerate(unique_individuals)}\n",
        "\n",
        "connection_line_color_map = {}\n",
        "for condition in ordered_conditions:\n",
        "    unique_individuals = data_df[data_df['Condition'] == condition]['Individual'].unique()\n",
        "    connection_line_colors = plt.cm.tab20b(np.linspace(0, 1, len(unique_individuals)))\n",
        "    connection_line_color_map[condition] = {ind: connection_line_colors[i] for i, ind in enumerate(unique_individuals)}\n",
        "\n",
        "colors = plt.cm.tab20(np.linspace(0, 1, len(data_df['Individual'].unique())))\n",
        "color_map = {ind: colors[i] for i, ind in enumerate(data_df['Individual'].unique())}\n",
        "\n",
        "def get_significance_level(p_value):\n",
        "    if p_value < 0.0001:\n",
        "        return \"****\"\n",
        "    elif p_value < 0.001:\n",
        "        return \"***\"\n",
        "    elif p_value < 0.01:\n",
        "        return \"**\"\n",
        "    elif p_value < 0.05:\n",
        "        return \"*\"\n",
        "    else:\n",
        "        return \"ns\"\n",
        "\n",
        "fig, axs = plt.subplots(2, 2, figsize=(16, 8), squeeze=False)\n",
        "\n",
        "subplot_labels = ['A', 'B', 'C', 'D']\n",
        "label_x_pos = -0.035\n",
        "label_y_pos = 1.08\n",
        "\n",
        "for ax, label in zip(axs.flatten(), subplot_labels):\n",
        "    ax.text(label_x_pos, label_y_pos, label, transform=ax.transAxes, fontsize=16, fontweight='bold', va='top', ha='right')\n",
        "\n",
        "for ax, scfa in zip(axs.flatten(), scfas):\n",
        "    for i, condition in enumerate(ordered_conditions):\n",
        "        condition_data = data_df[(data_df['Condition'] == condition) & (data_df['SCFA'] == scfa)]\n",
        "        expected_data = condition_data[condition_data['Fiber'] == 'Expected']['Fiber_Mean']\n",
        "        mixture_data = condition_data[condition_data['Fiber'] == 'Mixture']['Fiber_Mean']\n",
        "\n",
        "        if len(expected_data) == len(mixture_data):\n",
        "            stat, p_value = ttest_rel(expected_data, mixture_data)\n",
        "            significance = get_significance_level(p_value)\n",
        "            y_max = max(max(expected_data), max(mixture_data)) + 0.05\n",
        "            ax.text(i*2 + 0.5, y_max, significance, horizontalalignment='center', fontsize=12)\n",
        "\n",
        "        for fiber in ['Expected', 'Mixture']:\n",
        "            fiber_data = condition_data[condition_data['Fiber'] == fiber]\n",
        "            violin_parts = ax.violinplot(\n",
        "                fiber_data['Fiber_Mean'],\n",
        "                positions=[i*2 + (0 if fiber == 'Expected' else 1)],\n",
        "                showmeans=False,\n",
        "                showmedians=True\n",
        "            )\n",
        "\n",
        "            for pc in violin_parts['bodies']:\n",
        "                pc.set_facecolor(color_map[individual])\n",
        "                pc.set_edgecolor('grey')\n",
        "                pc.set_alpha(0.5)\n",
        "                if fiber == 'Expected':\n",
        "                    pc.set_hatch('///')\n",
        "\n",
        "            for partname in ['cmedians', 'cmins', 'cmaxes', 'cbars']:\n",
        "                vp = violin_parts.get(partname)\n",
        "                if vp:\n",
        "                    vp.set_edgecolor('grey')\n",
        "                    vp.set_linewidth(2)\n",
        "\n",
        "            for pc in violin_parts['bodies']:\n",
        "                individual = fiber_data['Individual'].values[violin_parts['bodies'].index(pc)]\n",
        "                pc.set_facecolor(color_map[individual])\n",
        "                pc.set_edgecolor('black')\n",
        "                pc.set_alpha(0.5)\n",
        "                if fiber == 'Expected':\n",
        "                    pc.set_hatch('///')\n",
        "\n",
        "            median = np.median(fiber_data['Fiber_Mean'])\n",
        "            ax.plot([i*2 + (0 if fiber == 'Expected' else 1) - 0.1, i*2 + (0 if fiber == 'Expected' else 1) + 0.1], [median, median], color='grey', lw=2, zorder=4)\n",
        "\n",
        "            for ind, mean in fiber_data[['Individual', 'Fiber_Mean']].values:\n",
        "                ax.scatter(i*2 + (0 if fiber == 'Expected' else 1), mean, color=connection_line_color_map[condition][ind], s=10, zorder=3)\n",
        "\n",
        "            if fiber == 'Mixture':\n",
        "                for ind in fiber_data['Individual'].unique():\n",
        "                    expected_mean = condition_data[(condition_data['Fiber'] == 'Expected') & (condition_data['Individual'] == ind)]['Fiber_Mean'].values[0]\n",
        "                    mixture_mean = condition_data[(condition_data['Fiber'] == 'Mixture') & (condition_data['Individual'] == ind)]['Fiber_Mean'].values[0]\n",
        "                    ax.plot([i*2, i*2 + 1], [expected_mean, mixture_mean], color=connection_line_color_map[condition][ind], linestyle=\"--\", zorder=2)\n",
        "\n",
        "    if scfa == 'Butyrate':\n",
        "        ax.yaxis.set_major_locator(MaxNLocator(integer=True))\n",
        "\n",
        "    ax.set_xticks(np.arange(0, len(ordered_conditions)*2, 2) + 0.5)\n",
        "    ax.set_xticklabels(ordered_conditions, fontsize='16')\n",
        "\n",
        "    if scfa == 'Total':\n",
        "        ax.set_ylabel(f'{scfa} SCFA (mM)', fontsize='16')\n",
        "    else:\n",
        "        ax.set_ylabel(f'{scfa} (mM)', fontsize='16')\n",
        "\n",
        "expected_patch = mpatches.Patch(facecolor='white', hatch='///', label='Expected', edgecolor='black')\n",
        "mixture_patch = mpatches.Patch(facecolor='white', label='Observed', edgecolor='black')\n",
        "\n",
        "legend = fig.legend(handles=[expected_patch, mixture_patch],\n",
        "                    loc=('upper right'),\n",
        "                    bbox_to_anchor=(1, 1),\n",
        "                    title=\"Fiber Type\",\n",
        "                    fontsize='16',\n",
        "                    title_fontsize='16',\n",
        "                    handlelength=2,\n",
        "                    handletextpad=0.5,\n",
        "                    labelspacing=0.5)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "fig.savefig('Figure1.svg', format='svg')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MhULYmx00AFc"
      },
      "source": [
        "## Figure 2. Ranking of performance of SCFA production by dietary fibers across individuals."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "GFPv_xnApnbT"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from matplotlib.patches import Patch\n",
        "from scipy import stats\n",
        "from io import StringIO\n",
        "\n",
        "data_str = data\n",
        "data_df = pd.read_csv(StringIO(data_str))\n",
        "\n",
        "conditions_df = data_df[data_df['con'].isin(['HC', 'CD', 'UC', 'HIV', 'PD'])]\n",
        "\n",
        "metrics = ['Acetate', 'Propionate', 'Butyrate', 'Total']\n",
        "fibers = ['Pectin', 'bGlucan', 'FOS', 'SAX', 'Mixture']\n",
        "\n",
        "def classify_significance(p_value):\n",
        "    if p_value < 0.0001:\n",
        "        return \"****\"\n",
        "    elif p_value < 0.001:\n",
        "        return \"***\"\n",
        "    elif p_value < 0.01:\n",
        "        return \"**\"\n",
        "    elif p_value < 0.05:\n",
        "        return \"*\"\n",
        "    else:\n",
        "        return \"ns\"\n",
        "\n",
        "individual_base_ids = set(id[:-2] for id in conditions_df['ID'] if \"e\" in id)\n",
        "\n",
        "results = []\n",
        "\n",
        "for individual in individual_base_ids:\n",
        "    for metric in metrics:\n",
        "        for fiber in fibers:\n",
        "            fiber_df = conditions_df[(conditions_df['ID'].str.startswith(individual)) & (conditions_df['fiber'] == fiber)]\n",
        "            fiber_data = fiber_df[metric].dropna()\n",
        "            fiber_mean = fiber_data.mean()\n",
        "            fiber_std = fiber_data.std()\n",
        "\n",
        "            if fiber == 'Mixture':\n",
        "                result = {\n",
        "                    \"Individual\": individual,\n",
        "                    \"SCFA\": metric,\n",
        "                    \"Fiber\": fiber,\n",
        "                    \"Fiber_Mean\": fiber_mean,\n",
        "                    \"Fiber_Std\": fiber_std,\n",
        "                    \"P-value_(other_fibers_vs_mixture)\": \"N/A\",\n",
        "                    \"Significance_(other_fibers_vs_mixture)\": \"N/A\"\n",
        "                }\n",
        "            else:\n",
        "                mixture_df = conditions_df[(conditions_df['ID'].str.startswith(individual)) & (conditions_df['fiber'] == 'Mixture')]\n",
        "                mixture_data = mixture_df[metric].dropna()\n",
        "\n",
        "                if len(fiber_data) == len(mixture_data) and not fiber_data.empty and not mixture_data.empty:\n",
        "                    t_stat, p_value = stats.ttest_rel(fiber_data, mixture_data)\n",
        "                    significance_label = classify_significance(p_value)\n",
        "                else:\n",
        "                    p_value = \"N/A\"\n",
        "                    significance_label = \"N/A\"\n",
        "\n",
        "                result = {\n",
        "                    \"Individual\": individual,\n",
        "                    \"SCFA\": metric,\n",
        "                    \"Fiber\": fiber,\n",
        "                    \"Fiber_Mean\": fiber_mean,\n",
        "                    \"Fiber_Std\": fiber_std,\n",
        "                    \"P-value_(other_fibers_vs_mixture)\": p_value,\n",
        "                    \"Significance_(other_fibers_vs_mixture)\": significance_label\n",
        "                }\n",
        "            results.append(result)\n",
        "\n",
        "results_df = pd.DataFrame(results)\n",
        "\n",
        "data_csv = StringIO()\n",
        "results_df.to_csv(data_csv, index=False)\n",
        "data_csv.seek(0)\n",
        "\n",
        "df = pd.read_csv(data_csv)\n",
        "\n",
        "scfas = ['Acetate', 'Propionate', 'Butyrate', 'Total']\n",
        "num_plots = len(scfas)\n",
        "\n",
        "fiber_order = ['Pectin', 'bGlucan', 'FOS', 'SAX', 'Mixture']\n",
        "colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#ffbb00']\n",
        "color_dict = dict(zip(fiber_order, colors))\n",
        "\n",
        "def custom_sort(individual):\n",
        "    order = {'H': 1, 'P': 2, 'C': 3, 'U': 4}\n",
        "    return (order.get(individual[0], 5), individual)\n",
        "\n",
        "condition_offsets = {\n",
        "    'HC': 5,\n",
        "    'PD': 15,\n",
        "    'CD': 22.5,\n",
        "    'UC': 29\n",
        "}\n",
        "\n",
        "fig, axs = plt.subplots(num_plots, 1, figsize=(15, 2 * num_plots))\n",
        "\n",
        "for idx, scfa in enumerate(scfas):\n",
        "    ax = axs[idx]\n",
        "    scfa_df = df[df['SCFA'] == scfa].copy()\n",
        "    scfa_df = scfa_df[~scfa_df['Individual'].str.startswith('V')]\n",
        "\n",
        "    individuals = scfa_df['Individual'].unique()\n",
        "    individuals_sorted = sorted(individuals, key=custom_sort)\n",
        "\n",
        "    condition_full_names = {\n",
        "        'H': 'HC',\n",
        "        'P': 'PD',\n",
        "        'C': 'CD',\n",
        "        'U': 'UC'\n",
        "    }\n",
        "    individual_groups = {ind: condition_full_names[ind[0]] for ind in individuals_sorted}\n",
        "    individual_numbers = {ind: str(int(ind[1:])) for ind in individuals_sorted}\n",
        "\n",
        "    positions = np.arange(len(individuals_sorted) * 5)\n",
        "    sec_labels = np.tile([individual_numbers[ind] for ind in individuals_sorted], 5)\n",
        "\n",
        "    group_transitions = {}\n",
        "    for group in set(individual_groups.values()):\n",
        "        last_idx = max([i for i, ind in enumerate(individuals_sorted) if individual_groups[ind] == group])\n",
        "        group_transitions[group] = last_idx\n",
        "\n",
        "    for rank in range(1, 6):\n",
        "        for individual_index, individual in enumerate(individuals_sorted):\n",
        "            individual_df = scfa_df[scfa_df['Individual'] == individual].sort_values(by='Fiber_Mean', ascending=False)\n",
        "            if rank <= len(individual_df):\n",
        "                fiber = individual_df.iloc[rank-1]['Fiber']\n",
        "                mean = individual_df.iloc[rank-1]['Fiber_Mean']\n",
        "                std = individual_df.iloc[rank-1]['Fiber_Std']\n",
        "                color = color_dict[fiber]\n",
        "                position = len(individuals_sorted) * (rank - 1) + individual_index\n",
        "                ax.bar(position, mean, yerr=std, color=color, capsize=3, width=1, bottom=0, label=fiber if rank == 1 and individual_index == 0 else \"\")\n",
        "\n",
        "        for group, last_idx in group_transitions.items():\n",
        "            if last_idx != len(individuals_sorted) - 1:\n",
        "                divider_position = (last_idx + 1) + len(individuals_sorted) * (rank - 1) - 0.5\n",
        "                ax.axvline(x=divider_position, color='grey', linestyle='--', linewidth=1.5)\n",
        "\n",
        "    if scfa == 'Butyrate':\n",
        "        ax.set_ylim(bottom=0)\n",
        "\n",
        "    for i in range(1, 5):\n",
        "        line_position = len(individuals_sorted) * i - 0.5\n",
        "        ax.axvline(x=line_position, color='black', linestyle='-', linewidth=2)\n",
        "\n",
        "    ax.set_xticklabels(sec_labels, fontsize=0, rotation=0, ha='center')\n",
        "\n",
        "    for group in set(individual_groups.values()):\n",
        "        start_idx = sum(1 for ind in individuals_sorted if individual_groups[ind] == group and custom_sort(ind)[1] < individuals_sorted[0][1:])\n",
        "        end_idx = sum(1 for ind in individuals_sorted if individual_groups[ind] == group and custom_sort(ind)[1] <= individuals_sorted[-1][1:])\n",
        "        for rank in range(5):\n",
        "            group_position = positions[start_idx + (end_idx - start_idx) // 2 + (rank - 1) * len(individuals_sorted)] + condition_offsets[group]\n",
        "            ax.text(group_position, ax.get_ylim()[0] - (ax.get_ylim()[1] - ax.get_ylim()[0]) * 0.03, group, ha='center', va='top', rotation=0, fontsize=9)\n",
        "\n",
        "    if scfa == 'Acetate':\n",
        "        ax.set_xticks([len(individuals_sorted) * (0.5 + i) for i in range(5)])\n",
        "        ax.set_xticklabels(['1st', '2nd', '3rd', '4th', '5th'], fontsize=14)\n",
        "        ax.tick_params(axis='x', which='major', labeltop=True, labelbottom=False, top=True, bottom=False)\n",
        "\n",
        "    ax.set_ylabel(f'{scfa} (mM)', fontsize=14)\n",
        "\n",
        "legend_elements = [Patch(facecolor=color, label=fiber) for fiber, color in color_dict.items()]\n",
        "axs[0].legend(handles=legend_elements, bbox_to_anchor=(0.96, 1.3), loc='upper left', title=\"Fibers\", fontsize=14, handletextpad=0.5, labelspacing=0.5, title_fontsize='14')\n",
        "\n",
        "plt.show()\n",
        "\n",
        "fig.savefig('Figure2.svg', format='svg')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "n7HKKovdv9hE"
      },
      "source": [
        "### Main findings"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "tfeEkS3pdtj0"
      },
      "outputs": [],
      "source": [
        "for scfa in scfas:\n",
        "    print(f\"\\n{scfa}:\")\n",
        "    scfa_df = df[df['SCFA'] == scfa]\n",
        "    total_samples = scfa_df['Individual'].nunique()  # Assuming 'Individual' uniquely identifies samples per SCFA.\n",
        "    for fiber in fiber_order:\n",
        "        for rank in range(1, 6):\n",
        "            count = scfa_df[(scfa_df['Rank'] == rank) & (scfa_df['Fiber'] == fiber)].shape[0]\n",
        "            percentage = (count / total_samples) * 100\n",
        "            print(f\"{fiber} appears {count} ({percentage:.0f}%) times in {rank}st place in the ranking for {scfa}.\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GWpdLYWtIpQv"
      },
      "source": [
        "## Figure S1. SCFA Production in Various Health Conditions."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "sdAGew6fMHX_"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from matplotlib.patches import Patch\n",
        "from matplotlib.lines import Line2D\n",
        "from matplotlib.ticker import FuncFormatter\n",
        "from io import StringIO\n",
        "from scipy import stats\n",
        "\n",
        "data_df = pd.read_csv(StringIO(data))\n",
        "\n",
        "conditions_df = data_df[data_df['con'].isin(['HC', 'CD', 'UC', 'PD'])]\n",
        "conditions_df = conditions_df[conditions_df['fiber'].isin(['Pectin', 'bGlucan', 'FOS', 'SAX', 'Mixture'])]\n",
        "\n",
        "metrics = ['Acetate', 'Propionate', 'Butyrate', 'Total']\n",
        "\n",
        "def classify_significance(p_value):\n",
        "    if p_value < 0.0001:\n",
        "        return \"****\"\n",
        "    elif p_value < 0.001:\n",
        "        return \"***\"\n",
        "    elif p_value < 0.01:\n",
        "        return \"**\"\n",
        "    elif p_value < 0.05:\n",
        "        return \"*\"\n",
        "    else:\n",
        "        return \"ns\"\n",
        "\n",
        "grouped = conditions_df.groupby(['con', 'fiber'])\n",
        "results = []\n",
        "for name, group in grouped:\n",
        "    condition, fiber = name\n",
        "    for metric in metrics:\n",
        "        mean_val = group[metric].mean()\n",
        "        std_val = group[metric].std()\n",
        "        results.append({\n",
        "            \"Condition\": condition,\n",
        "            \"Fiber\": fiber,\n",
        "            \"SCFA\": metric,\n",
        "            \"Mean\": mean_val,\n",
        "            \"Std\": std_val\n",
        "        })\n",
        "\n",
        "results_df = pd.DataFrame(results)\n",
        "\n",
        "fiber_order = ['Pectin', 'bGlucan', 'FOS', 'SAX', 'Mixture']\n",
        "fiber_order_dict = {fiber: i for i, fiber in enumerate(fiber_order)}\n",
        "results_df['fiber_order'] = results_df['Fiber'].map(fiber_order_dict)\n",
        "results_df.sort_values(by=['Condition', 'fiber_order'], inplace=True)\n",
        "\n",
        "expected_means = results_df[results_df['Fiber'] != 'Mixture'].groupby(['Condition', 'SCFA']).apply(\n",
        "    lambda x: sum(x[x['Fiber'] == fiber]['Mean'].values[0] * 0.25 for fiber in ['Pectin', 'bGlucan', 'FOS', 'SAX'])\n",
        ").reset_index().rename(columns={0: 'Expected_Mean'})\n",
        "\n",
        "significance_dict = {fiber: {} for fiber in fiber_order[:-1]}\n",
        "for condition in ['HC', 'PD', 'CD', 'UC']:\n",
        "    for metric in metrics:\n",
        "        for fiber in fiber_order[:-1]:\n",
        "            fiber_data = conditions_df[(conditions_df['con'] == condition) & (conditions_df['fiber'] == fiber)][metric]\n",
        "            mixture_data = conditions_df[(conditions_df['con'] == condition) & (conditions_df['fiber'] == 'Mixture')][metric]\n",
        "            if len(fiber_data) == len(mixture_data) and not fiber_data.empty and not mixture_data.empty:\n",
        "                t_stat, p_value = stats.ttest_rel(fiber_data, mixture_data)\n",
        "                if fiber_data.mean() < mixture_data.mean():\n",
        "                    significance_dict[fiber][(condition, metric)] = classify_significance(p_value)\n",
        "\n",
        "scfas = ['Acetate', 'Propionate', 'Butyrate', 'Total']\n",
        "colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#ffbb00']\n",
        "color_dict = dict(zip(fiber_order, colors))\n",
        "\n",
        "fig, axs = plt.subplots(2, 2, figsize=(14, 8))\n",
        "axs = axs.flatten()\n",
        "\n",
        "group_gap = 1\n",
        "\n",
        "patches = [Patch(color=color_dict[fiber], label=fiber) for fiber in fiber_order]\n",
        "expected_line = Line2D([0], [0], color='red', linestyle='dashed', linewidth=2, label='Expected')\n",
        "patches.append(expected_line)\n",
        "\n",
        "subplot_labels = ['A', 'B', 'C', 'D']\n",
        "\n",
        "for idx, scfa in enumerate(scfas):\n",
        "    ax = axs[idx]\n",
        "    max_y = 0\n",
        "    vertical_offsets = {condition: 0 for condition in ['HC', 'PD', 'CD', 'UC']}\n",
        "\n",
        "    for condition_index, condition in enumerate(['HC', 'PD', 'CD', 'UC']):\n",
        "        subset = results_df[(results_df['SCFA'] == scfa) & (results_df['Condition'] == condition)]\n",
        "        start_pos = int(condition_index * (len(fiber_order) + group_gap))\n",
        "        positions = range(start_pos, start_pos + len(fiber_order))\n",
        "\n",
        "        bars = ax.bar(positions, subset['Mean'], yerr=subset['Std'], color=[color_dict[fiber] for fiber in subset['Fiber']],\n",
        "                      capsize=3, label=f\"{condition}\" if idx == 0 else \"\")\n",
        "\n",
        "        max_y = max(max_y, max(subset['Mean'] + subset['Std']))\n",
        "\n",
        "        expected_mean = expected_means[(expected_means['Condition'] == condition) & (expected_means['SCFA'] == scfa)]['Expected_Mean'].values[0]\n",
        "        ax.hlines(expected_mean, positions[0], positions[-1], colors='red', linestyles='dashed', linewidth=2)\n",
        "\n",
        "        for fiber in fiber_order[:-1]:\n",
        "            if (condition, scfa) in significance_dict[fiber] and significance_dict[fiber][(condition, scfa)] != 'ns':\n",
        "                sig_label = significance_dict[fiber][(condition, scfa)]\n",
        "                fiber_pos = start_pos + fiber_order_dict[fiber]\n",
        "                mixture_pos = start_pos + fiber_order_dict['Mixture']\n",
        "                y_offset = vertical_offsets[condition]\n",
        "                y = max_y + y_offset + max_y * 0.1\n",
        "                h = max_y * 0.02\n",
        "                col = 'k'\n",
        "                ax.plot([fiber_pos, fiber_pos, mixture_pos, mixture_pos], [y, y + h, y + h, y], lw=1.5, c=col)\n",
        "                ax.text((fiber_pos + mixture_pos) * .5, y + h, sig_label, ha='center', va='bottom', color=col)\n",
        "                vertical_offsets[condition] += max_y * 0.1\n",
        "\n",
        "    ax.set_xticks([int(i * (len(fiber_order) + group_gap)) + (len(fiber_order) // 2) for i in range(len(['HC', 'PD', 'CD', 'UC']))])\n",
        "    ax.set_xticklabels(['HC', 'PD', 'CD', 'UC'])\n",
        "    ax.set_ylabel(f'{scfa} (mM)', fontsize=16)\n",
        "    ax.text(-0.1, 1.05, subplot_labels[idx], transform=ax.transAxes, size=20, weight='bold')\n",
        "\n",
        "    if scfa == 'Butyrate':\n",
        "        ax.yaxis.set_major_formatter(FuncFormatter(lambda x, _: f'{int(x)}'))\n",
        "\n",
        "fig.legend(handles=patches, loc='upper right', bbox_to_anchor=(1.1, 1), title=\"Fibers\", fontsize=14, title_fontsize=14)\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "fig.savefig('FigureS1.svg', format='svg', bbox_inches='tight')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sM9gcMeayMHr"
      },
      "source": [
        "## Figure S2. Variability in SCFA Production: Comparison Across Conditions and Fiber Types."
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from io import StringIO\n",
        "\n",
        "data_io = StringIO(data_csv)\n",
        "df = pd.read_csv(data_io)\n",
        "\n",
        "df = df[df['Condition'] != 'HIV']\n",
        "\n",
        "filtered_fibers = ['Pectin', 'bGlucan', 'FOS', 'SAX', 'Mixture']\n",
        "df = df[df['Fiber'].isin(filtered_fibers)]\n",
        "\n",
        "fiber_order = ['Pectin', 'bGlucan', 'FOS', 'SAX', 'Mixture']\n",
        "colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#ffbb00']\n",
        "fiber_palette = dict(zip(fiber_order, colors))\n",
        "\n",
        "fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(14, 10), sharey=True)\n",
        "fig.subplots_adjust(hspace=0.4, wspace=0.4)\n",
        "\n",
        "titles = ['CV Acetate', 'CV Propionate', 'CV Butyrate', 'CV Total']\n",
        "\n",
        "columns = ['CV_Acetate (%)', 'CV_Propionate (%)', 'CV_Butyrate (%)', 'CV_Total (%)']\n",
        "\n",
        "conditions_order = ['HC', 'PD', 'CD', 'UC', 'All conditions']\n",
        "\n",
        "for ax, column, title in zip(axes.flatten(), columns, titles):\n",
        "    sns.barplot(data=df, x='Condition', y=column, hue='Fiber', ax=ax, palette=fiber_palette,\n",
        "                hue_order=fiber_order, order=conditions_order,\n",
        "                capsize=.2)\n",
        "    ax.set_title(title)\n",
        "    ax.set_xlabel('Condition')\n",
        "    ax.set_ylabel('Coefficient of Variation (%)', fontsize=14)\n",
        "\n",
        "axes[0, 1].legend(title='Fiber', bbox_to_anchor=(1.0, 1), loc='upper left', fontsize=14, title_fontsize=14)\n",
        "for ax in [axes[0, 0], axes[1, 0], axes[1, 1]]:\n",
        "    ax.get_legend().remove()\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n",
        "\n",
        "fig.savefig('FigureS2.svg', format='svg', bbox_inches='tight')"
      ],
      "metadata": {
        "id": "BU09LeOQbJsk"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
